name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests with coverage
      env:
        FLASK_APP: app.py
        FLASK_ENV: testing
        STRIPE_SECRET_KEY: sk_test_fake_key_for_testing_only
        STRIPE_PUBLISHABLE_KEY: pk_test_fake_key_for_testing_only
        DATABASE_URL: sqlite:///test.db
        SECRET_KEY: test_secret_key_for_github_actions
      run: |
        cd backend
        python -m pytest -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm --version
        # Try npm ci first, fallback to npm install if it fails
        npm ci || npm install --frozen-lockfile
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --ci --watchAll=false --passWithNoTests
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Set up Python (for Python analysis)
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies (for Python analysis)
      if: matrix.language == 'python'
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install JavaScript dependencies (for JavaScript analysis)
      if: matrix.language == 'javascript'
      run: |
        cd frontend
        npm ci || npm install --frozen-lockfile
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  integration-check:
    name: Integration Check
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, codeql-analysis]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: All checks passed
      run: |
        echo "✅ All backend and frontend tests have passed!"
        echo "✅ CodeQL security analysis completed!"
        echo "✅ PR is ready for review and merge." 